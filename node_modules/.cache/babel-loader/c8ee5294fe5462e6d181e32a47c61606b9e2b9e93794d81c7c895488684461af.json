{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\andre\\\\source\\\\repos\\\\budget-manager-frontend\\\\src\\\\components\\\\TransactionList.js\",\n  _s = $RefreshSig$();\nimport react, { useEffect, useState } from 'react';\nimport { fetchTransactions } from '../services/api';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TransactionList = ({\n  categoryId\n}) => {\n  _s();\n  const [transactions, setTransactions] = useState([]);\n  const [error, setError] = useState(null);\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const result = await fetchTransactions(categoryId);\n        setTransactions(result);\n      } catch (err) {\n        setError('Failed to fetch transactions');\n      }\n    };\n    if (categoryId) {\n      fetchData();\n    }\n  }, [categoryId]);\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 16\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Transaction History\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"transaction-history\",\n      children: /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: transactions.map(transaction => /*#__PURE__*/_jsxDEV(\"li\", {\n          children: [transaction.title, \": \", transaction.amount, \" on \", new Date(transaction.date).toLocaleDateString()]\n        }, transaction.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 31,\n          columnNumber: 21\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 26,\n    columnNumber: 9\n  }, this);\n};\n_s(TransactionList, \"yZk5gdwaUfyVoWK6nw6LeFHn8nw=\");\n_c = TransactionList;\nexport default TransactionList;\nvar _c;\n$RefreshReg$(_c, \"TransactionList\");","map":{"version":3,"names":["react","useEffect","useState","fetchTransactions","jsxDEV","_jsxDEV","TransactionList","categoryId","_s","transactions","setTransactions","error","setError","fetchData","result","err","children","fileName","_jsxFileName","lineNumber","columnNumber","className","map","transaction","title","amount","Date","date","toLocaleDateString","id","_c","$RefreshReg$"],"sources":["C:/Users/andre/source/repos/budget-manager-frontend/src/components/TransactionList.js"],"sourcesContent":["import react, { useEffect, useState } from 'react';\r\nimport { fetchTransactions } from '../services/api'; \r\n\r\nconst TransactionList = ({ categoryId }) => {\r\n    const [transactions, setTransactions] = useState([]);\r\n    const [error, setError] = useState(null);\r\n\r\n    useEffect(() => {\r\n        const fetchData = async () => {\r\n            try {\r\n                const result = await fetchTransactions(categoryId);\r\n                setTransactions(result);\r\n            } catch (err) {\r\n                setError('Failed to fetch transactions');\r\n            }\r\n        };\r\n        if (categoryId) {\r\n            fetchData();\r\n        }\r\n\r\n    }, [categoryId]);\r\n    if (error) {\r\n        return <div>{error}</div>;\r\n    }\r\n    return (\r\n        <div>\r\n            <h2>Transaction History</h2>\r\n            <div className=\"transaction-history\">\r\n            <ul>\r\n                {transactions.map((transaction) => (\r\n                    <li key={transaction.id}>\r\n                        {transaction.title}: {transaction.amount} on {new Date(transaction.date).toLocaleDateString()}\r\n                    </li>\r\n                ))}\r\n            </ul>\r\n            </div>\r\n        </div>\r\n\r\n    );\r\n\r\n};\r\n\r\nexport default TransactionList;\r\n\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,SAASC,iBAAiB,QAAQ,iBAAiB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEpD,MAAMC,eAAe,GAAGA,CAAC;EAAEC;AAAW,CAAC,KAAK;EAAAC,EAAA;EACxC,MAAM,CAACC,YAAY,EAAEC,eAAe,CAAC,GAAGR,QAAQ,CAAC,EAAE,CAAC;EACpD,MAAM,CAACS,KAAK,EAAEC,QAAQ,CAAC,GAAGV,QAAQ,CAAC,IAAI,CAAC;EAExCD,SAAS,CAAC,MAAM;IACZ,MAAMY,SAAS,GAAG,MAAAA,CAAA,KAAY;MAC1B,IAAI;QACA,MAAMC,MAAM,GAAG,MAAMX,iBAAiB,CAACI,UAAU,CAAC;QAClDG,eAAe,CAACI,MAAM,CAAC;MAC3B,CAAC,CAAC,OAAOC,GAAG,EAAE;QACVH,QAAQ,CAAC,8BAA8B,CAAC;MAC5C;IACJ,CAAC;IACD,IAAIL,UAAU,EAAE;MACZM,SAAS,CAAC,CAAC;IACf;EAEJ,CAAC,EAAE,CAACN,UAAU,CAAC,CAAC;EAChB,IAAII,KAAK,EAAE;IACP,oBAAON,OAAA;MAAAW,QAAA,EAAML;IAAK;MAAAM,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAC;EAC7B;EACA,oBACIf,OAAA;IAAAW,QAAA,gBACIX,OAAA;MAAAW,QAAA,EAAI;IAAmB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAC5Bf,OAAA;MAAKgB,SAAS,EAAC,qBAAqB;MAAAL,QAAA,eACpCX,OAAA;QAAAW,QAAA,EACKP,YAAY,CAACa,GAAG,CAAEC,WAAW,iBAC1BlB,OAAA;UAAAW,QAAA,GACKO,WAAW,CAACC,KAAK,EAAC,IAAE,EAACD,WAAW,CAACE,MAAM,EAAC,MAAI,EAAC,IAAIC,IAAI,CAACH,WAAW,CAACI,IAAI,CAAC,CAACC,kBAAkB,CAAC,CAAC;QAAA,GADxFL,WAAW,CAACM,EAAE;UAAAZ,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAEnB,CACP;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACF;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACA,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACL,CAAC;AAId,CAAC;AAACZ,EAAA,CArCIF,eAAe;AAAAwB,EAAA,GAAfxB,eAAe;AAuCrB,eAAeA,eAAe;AAAC,IAAAwB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}